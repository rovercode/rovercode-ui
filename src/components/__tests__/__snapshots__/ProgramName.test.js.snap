// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`The ProgramName component renders on the page with no errors 1`] = `
<withCookies(injectIntl(Connect(ProgramName)))
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [MockFunction],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <withCookies(injectIntl(Connect(ProgramName)))
    cookies={
      Cookies {
        "HAS_DOCUMENT_COOKIE": true,
        "changeListeners": Array [
          [Function],
        ],
        "cookies": Object {},
      }
    }
    forwardedRef={null}
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [MockFunction],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
  >
    <injectIntl(Connect(ProgramName))
      allCookies={Object {}}
      cookies={
        Cookies {
          "HAS_DOCUMENT_COOKIE": true,
          "changeListeners": Array [
            [Function],
          ],
          "cookies": Object {},
        }
      }
      store={
        Object {
          "clearActions": [Function],
          "dispatch": [MockFunction],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        }
      }
    >
      <Connect(ProgramName)
        allCookies={Object {}}
        cookies={
          Cookies {
            "HAS_DOCUMENT_COOKIE": true,
            "changeListeners": Array [
              [Function],
            ],
            "cookies": Object {},
          }
        }
        intl={
          Object {
            "defaultFormats": Object {},
            "defaultLocale": "en",
            "formatDate": [Function],
            "formatDateToParts": [Function],
            "formatDisplayName": [Function],
            "formatList": [Function],
            "formatMessage": [Function],
            "formatNumber": [Function],
            "formatNumberToParts": [Function],
            "formatPlural": [Function],
            "formatRelativeTime": [Function],
            "formatTime": [Function],
            "formatTimeToParts": [Function],
            "formats": Object {},
            "formatters": Object {
              "getDateTimeFormat": [Function],
              "getDisplayNames": [Function],
              "getListFormat": [Function],
              "getMessageFormat": [Function],
              "getNumberFormat": [Function],
              "getPluralRules": [Function],
              "getRelativeTimeFormat": [Function],
            },
            "locale": "en",
            "messages": Object {},
            "onError": [Function],
            "textComponent": Symbol(react.fragment),
            "timeZone": undefined,
            "wrapRichTextChunksInFragment": undefined,
          }
        }
        store={
          Object {
            "clearActions": [Function],
            "dispatch": [MockFunction],
            "getActions": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          }
        }
      >
        <ProgramName
          allCookies={Object {}}
          changeName={[Function]}
          code={
            Object {
              "isReadOnly": false,
              "name": "test name",
            }
          }
          cookies={
            Cookies {
              "HAS_DOCUMENT_COOKIE": true,
              "changeListeners": Array [
                [Function],
              ],
              "cookies": Object {},
            }
          }
          intl={
            Object {
              "defaultFormats": Object {},
              "defaultLocale": "en",
              "formatDate": [Function],
              "formatDateToParts": [Function],
              "formatDisplayName": [Function],
              "formatList": [Function],
              "formatMessage": [Function],
              "formatNumber": [Function],
              "formatNumberToParts": [Function],
              "formatPlural": [Function],
              "formatRelativeTime": [Function],
              "formatTime": [Function],
              "formatTimeToParts": [Function],
              "formats": Object {},
              "formatters": Object {
                "getDateTimeFormat": [Function],
                "getDisplayNames": [Function],
                "getListFormat": [Function],
                "getMessageFormat": [Function],
                "getNumberFormat": [Function],
                "getPluralRules": [Function],
                "getRelativeTimeFormat": [Function],
              },
              "locale": "en",
              "messages": Object {},
              "onError": [Function],
              "textComponent": Symbol(react.fragment),
              "timeZone": undefined,
              "wrapRichTextChunksInFragment": undefined,
            }
          }
          store={
            Object {
              "clearActions": [Function],
              "dispatch": [MockFunction],
              "getActions": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
            }
          }
        >
          <WithStyles(ForwardRef(InputLabel))
            htmlFor="program-name"
          >
            <ForwardRef(InputLabel)
              classes={
                Object {
                  "animated": "MuiInputLabel-animated",
                  "asterisk": "MuiInputLabel-asterisk",
                  "disabled": "Mui-disabled",
                  "error": "Mui-error",
                  "filled": "MuiInputLabel-filled",
                  "focused": "Mui-focused",
                  "formControl": "MuiInputLabel-formControl",
                  "marginDense": "MuiInputLabel-marginDense",
                  "outlined": "MuiInputLabel-outlined",
                  "required": "Mui-required",
                  "root": "MuiInputLabel-root",
                  "shrink": "MuiInputLabel-shrink",
                }
              }
              htmlFor="program-name"
            >
              <WithStyles(ForwardRef(FormLabel))
                className="MuiInputLabel-root MuiInputLabel-animated"
                classes={
                  Object {
                    "asterisk": "MuiInputLabel-asterisk",
                    "disabled": "Mui-disabled",
                    "error": "Mui-error",
                    "focused": "Mui-focused",
                    "required": "Mui-required",
                  }
                }
                htmlFor="program-name"
              >
                <ForwardRef(FormLabel)
                  className="MuiInputLabel-root MuiInputLabel-animated"
                  classes={
                    Object {
                      "asterisk": "MuiFormLabel-asterisk MuiInputLabel-asterisk",
                      "colorSecondary": "MuiFormLabel-colorSecondary",
                      "disabled": "Mui-disabled Mui-disabled",
                      "error": "Mui-error Mui-error",
                      "filled": "MuiFormLabel-filled",
                      "focused": "Mui-focused Mui-focused",
                      "required": "Mui-required Mui-required",
                      "root": "MuiFormLabel-root",
                    }
                  }
                  htmlFor="program-name"
                >
                  <label
                    className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-animated"
                    htmlFor="program-name"
                  >
                    Name:
                  </label>
                </ForwardRef(FormLabel)>
              </WithStyles(ForwardRef(FormLabel))>
            </ForwardRef(InputLabel)>
          </WithStyles(ForwardRef(InputLabel))>
          <WithStyles(ForwardRef(Input))
            disabled={false}
            endAdornment={null}
            id="program-name"
            onChange={[Function]}
            value="test name"
          >
            <ForwardRef(Input)
              classes={
                Object {
                  "colorSecondary": "MuiInput-colorSecondary",
                  "disabled": "Mui-disabled",
                  "error": "Mui-error",
                  "focused": "Mui-focused",
                  "formControl": "MuiInput-formControl",
                  "fullWidth": "MuiInput-fullWidth",
                  "input": "MuiInput-input",
                  "inputMarginDense": "MuiInput-inputMarginDense",
                  "inputMultiline": "MuiInput-inputMultiline",
                  "inputTypeSearch": "MuiInput-inputTypeSearch",
                  "marginDense": "MuiInput-marginDense",
                  "multiline": "MuiInput-multiline",
                  "root": "MuiInput-root",
                  "underline": "MuiInput-underline",
                }
              }
              disabled={false}
              endAdornment={null}
              id="program-name"
              onChange={[Function]}
              value="test name"
            >
              <WithStyles(ForwardRef(InputBase))
                classes={
                  Object {
                    "colorSecondary": "MuiInput-colorSecondary",
                    "disabled": "Mui-disabled",
                    "error": "Mui-error",
                    "focused": "Mui-focused",
                    "formControl": "MuiInput-formControl",
                    "fullWidth": "MuiInput-fullWidth",
                    "input": "MuiInput-input",
                    "inputMarginDense": "MuiInput-inputMarginDense",
                    "inputMultiline": "MuiInput-inputMultiline",
                    "inputTypeSearch": "MuiInput-inputTypeSearch",
                    "marginDense": "MuiInput-marginDense",
                    "multiline": "MuiInput-multiline",
                    "root": "MuiInput-root MuiInput-underline",
                    "underline": null,
                  }
                }
                disabled={false}
                endAdornment={null}
                fullWidth={false}
                id="program-name"
                inputComponent="input"
                multiline={false}
                onChange={[Function]}
                type="text"
                value="test name"
              >
                <ForwardRef(InputBase)
                  classes={
                    Object {
                      "adornedEnd": "MuiInputBase-adornedEnd",
                      "adornedStart": "MuiInputBase-adornedStart",
                      "colorSecondary": "MuiInputBase-colorSecondary MuiInput-colorSecondary",
                      "disabled": "Mui-disabled Mui-disabled",
                      "error": "Mui-error Mui-error",
                      "focused": "Mui-focused Mui-focused",
                      "formControl": "MuiInputBase-formControl MuiInput-formControl",
                      "fullWidth": "MuiInputBase-fullWidth MuiInput-fullWidth",
                      "input": "MuiInputBase-input MuiInput-input",
                      "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                      "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                      "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                      "inputMarginDense": "MuiInputBase-inputMarginDense MuiInput-inputMarginDense",
                      "inputMultiline": "MuiInputBase-inputMultiline MuiInput-inputMultiline",
                      "inputTypeSearch": "MuiInputBase-inputTypeSearch MuiInput-inputTypeSearch",
                      "marginDense": "MuiInputBase-marginDense MuiInput-marginDense",
                      "multiline": "MuiInputBase-multiline MuiInput-multiline",
                      "root": "MuiInputBase-root MuiInput-root MuiInput-underline",
                    }
                  }
                  disabled={false}
                  endAdornment={null}
                  fullWidth={false}
                  id="program-name"
                  inputComponent="input"
                  multiline={false}
                  onChange={[Function]}
                  type="text"
                  value="test name"
                >
                  <div
                    className="MuiInputBase-root MuiInput-root MuiInput-underline"
                    onClick={[Function]}
                  >
                    <input
                      className="MuiInputBase-input MuiInput-input"
                      disabled={false}
                      id="program-name"
                      onAnimationStart={[Function]}
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      type="text"
                      value="test name"
                    />
                  </div>
                </ForwardRef(InputBase)>
              </WithStyles(ForwardRef(InputBase))>
            </ForwardRef(Input)>
          </WithStyles(ForwardRef(Input))>
        </ProgramName>
      </Connect(ProgramName)>
    </injectIntl(Connect(ProgramName))>
  </withCookies(injectIntl(Connect(ProgramName)))>
</withCookies(injectIntl(Connect(ProgramName)))>
`;
