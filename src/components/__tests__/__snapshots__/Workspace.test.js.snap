// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`The Workspace component renders on the page with no errors 1`] = `
<withCookies(injectIntl(Connect(Workspace)))
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [MockFunction] {
        "calls": Array [
          Array [
            Object {
              "type": "CLEAR",
            },
          ],
          Array [
            Object {
              "payload": "Rovercode console started",
              "type": "APPEND",
            },
          ],
          Array [
            Object {
              "payload": Promise {},
              "type": "CREATE_PROGRAM",
            },
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": Promise {},
          },
          Object {
            "type": "return",
            "value": Promise {},
          },
          Object {
            "type": "return",
            "value": Promise {},
          },
        ],
      },
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <withCookies(injectIntl(Connect(Workspace)))
    cookies={
      Cookies {
        "HAS_DOCUMENT_COOKIE": true,
        "changeListeners": Array [
          [Function],
        ],
        "cookies": Object {},
      }
    }
    forwardedRef={null}
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [MockFunction] {
          "calls": Array [
            Array [
              Object {
                "type": "CLEAR",
              },
            ],
            Array [
              Object {
                "payload": "Rovercode console started",
                "type": "APPEND",
              },
            ],
            Array [
              Object {
                "payload": Promise {},
                "type": "CREATE_PROGRAM",
              },
            ],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": Promise {},
            },
            Object {
              "type": "return",
              "value": Promise {},
            },
            Object {
              "type": "return",
              "value": Promise {},
            },
          ],
        },
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
  >
    <injectIntl(Connect(Workspace))
      allCookies={Object {}}
      cookies={
        Cookies {
          "HAS_DOCUMENT_COOKIE": true,
          "changeListeners": Array [
            [Function],
          ],
          "cookies": Object {},
        }
      }
      store={
        Object {
          "clearActions": [Function],
          "dispatch": [MockFunction] {
            "calls": Array [
              Array [
                Object {
                  "type": "CLEAR",
                },
              ],
              Array [
                Object {
                  "payload": "Rovercode console started",
                  "type": "APPEND",
                },
              ],
              Array [
                Object {
                  "payload": Promise {},
                  "type": "CREATE_PROGRAM",
                },
              ],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": Promise {},
              },
              Object {
                "type": "return",
                "value": Promise {},
              },
              Object {
                "type": "return",
                "value": Promise {},
              },
            ],
          },
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        }
      }
    >
      <Connect(Workspace)
        allCookies={Object {}}
        cookies={
          Cookies {
            "HAS_DOCUMENT_COOKIE": true,
            "changeListeners": Array [
              [Function],
            ],
            "cookies": Object {},
          }
        }
        intl={
          Object {
            "defaultFormats": Object {},
            "defaultLocale": "en",
            "formatDate": [Function],
            "formatDateToParts": [Function],
            "formatDisplayName": [Function],
            "formatHTMLMessage": [Function],
            "formatList": [Function],
            "formatMessage": [Function],
            "formatNumber": [Function],
            "formatNumberToParts": [Function],
            "formatPlural": [Function],
            "formatRelativeTime": [Function],
            "formatTime": [Function],
            "formatTimeToParts": [Function],
            "formats": Object {},
            "formatters": Object {
              "getDateTimeFormat": [Function],
              "getDisplayNames": [Function],
              "getListFormat": [Function],
              "getMessageFormat": [Function],
              "getNumberFormat": [Function],
              "getPluralRules": [Function],
              "getRelativeTimeFormat": [Function],
            },
            "locale": "en",
            "messages": Object {},
            "onError": [Function],
            "textComponent": Symbol(react.fragment),
            "timeZone": undefined,
          }
        }
        store={
          Object {
            "clearActions": [Function],
            "dispatch": [MockFunction] {
              "calls": Array [
                Array [
                  Object {
                    "type": "CLEAR",
                  },
                ],
                Array [
                  Object {
                    "payload": "Rovercode console started",
                    "type": "APPEND",
                  },
                ],
                Array [
                  Object {
                    "payload": Promise {},
                    "type": "CREATE_PROGRAM",
                  },
                ],
              ],
              "results": Array [
                Object {
                  "type": "return",
                  "value": Promise {},
                },
                Object {
                  "type": "return",
                  "value": Promise {},
                },
                Object {
                  "type": "return",
                  "value": Promise {},
                },
              ],
            },
            "getActions": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          }
        }
      >
        <Workspace
          allCookies={Object {}}
          changeExecutionState={[Function]}
          changeReadOnly={[Function]}
          clearConsole={[Function]}
          code={
            Object {
              "execution": null,
              "id": 1,
              "jsCode": "",
              "lesson": null,
              "name": "test program",
            }
          }
          cookies={
            Cookies {
              "HAS_DOCUMENT_COOKIE": true,
              "changeListeners": Array [
                [Function],
              ],
              "cookies": Object {},
            }
          }
          createProgram={[Function]}
          fetchProgram={[Function]}
          intl={
            Object {
              "defaultFormats": Object {},
              "defaultLocale": "en",
              "formatDate": [Function],
              "formatDateToParts": [Function],
              "formatDisplayName": [Function],
              "formatHTMLMessage": [Function],
              "formatList": [Function],
              "formatMessage": [Function],
              "formatNumber": [Function],
              "formatNumberToParts": [Function],
              "formatPlural": [Function],
              "formatRelativeTime": [Function],
              "formatTime": [Function],
              "formatTimeToParts": [Function],
              "formats": Object {},
              "formatters": Object {
                "getDateTimeFormat": [Function],
                "getDisplayNames": [Function],
                "getListFormat": [Function],
                "getMessageFormat": [Function],
                "getNumberFormat": [Function],
                "getPluralRules": [Function],
                "getRelativeTimeFormat": [Function],
              },
              "locale": "en",
              "messages": Object {},
              "onError": [Function],
              "textComponent": Symbol(react.fragment),
              "timeZone": undefined,
            }
          }
          rover={
            Object {
              "rover": Object {
                "name": "togaz",
              },
              "transmitChannel": Object {
                "writeValue": [MockFunction],
              },
            }
          }
          saveProgram={[Function]}
          sendToRover={[Function]}
          sensor={
            Object {
              "left": 2,
              "right": 2,
            }
          }
          store={
            Object {
              "clearActions": [Function],
              "dispatch": [MockFunction] {
                "calls": Array [
                  Array [
                    Object {
                      "type": "CLEAR",
                    },
                  ],
                  Array [
                    Object {
                      "payload": "Rovercode console started",
                      "type": "APPEND",
                    },
                  ],
                  Array [
                    Object {
                      "payload": Promise {},
                      "type": "CREATE_PROGRAM",
                    },
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": Promise {},
                  },
                  Object {
                    "type": "return",
                    "value": Promise {},
                  },
                  Object {
                    "type": "return",
                    "value": Promise {},
                  },
                ],
              },
              "getActions": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
            }
          }
          updateJsCode={[Function]}
          updateXmlCode={[Function]}
          writeToConsole={[Function]}
        >
          <Container
            style={
              Object {
                "height": "80vh",
              }
            }
          >
            <div
              className="ui container"
              style={
                Object {
                  "height": "80vh",
                }
              }
            >
              <div
                id="blocklyDiv"
              >
                <div
                  style={
                    Object {
                      "bottom": 30,
                      "position": "absolute",
                      "right": 100,
                    }
                  }
                >
                  <div
                    isConnected={true}
                  />
                </div>
              </div>
            </div>
          </Container>
        </Workspace>
      </Connect(Workspace)>
    </injectIntl(Connect(Workspace))>
  </withCookies(injectIntl(Connect(Workspace)))>
</withCookies(injectIntl(Connect(Workspace)))>
`;
